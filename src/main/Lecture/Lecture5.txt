자바 예외 이해
    예외 계층
        스프링에서 예외를 다룰때 사용하는 방법???

        Error는 메모리 부족이나 시스템오류 같이 애플리케이션에서 복구 불가능한 시스템 예외
        개발자는 이런 에러는 잡을 수 없다.

        체크 예외 : 컴파일러가 체크하는 예외
        런타임 예외 : 컴파일러가 체크하지 않는 예외
        언체크 예외 : 런타임 예외의 상위 클래스

    예외 기본 규칙
        예외는 폭탄돌리기 같은것! 잡아서 처리하거나, 처리할 수 없으면 밖으로 던져야한다.

    체크 예외 기본 이해
        Exception과 그 하위 예외는 모두 컴파일러가 체크하는 체크 예외이다. 단! RuntimeException은 예외
        체크 예외는 잡아서 처리하거나 던져야한다. 아니면 컴파일오류 발생

        catch에 있는 에러의 타입과 그 하위 타입을 모두 잡을 수 있다.

        Exception을 던지는건 좋지않다! 조금 더 세밀하게 지정해주는것이 좋다.

        추가로 의존관계에 따른 단점도 있다. 데이터베이스 계층 -> 서비스 계층 -> 컨트롤러 계층 이렇게 타고 올라갈 수 있기 때문

    언체크 예외 기본 이해
        RuntimeException과 그 하위 예외는 언체크 예외로 분류된다.
        언체크 예외는 말 그대로 컴파일러가 예외를 체크하지 않는다는 뜻!

        예외를 잡아서 처리하지 않아도 throws를 생략할 수 있다.

        예외를 처리할 수 없을때 예외를 밖으로 던지는데 이부분이 필수인가 생략할수있는가의 차이가 체크와 언체크 예외의 차이이다.

    체크 예외 활용
        ★기본적으로 런타임 예외를 사용하자!
        ★체크 예외는 비즈니스 로직상 너무 중요해서 의도적으로 던지는 예외에만 사용하자!
            계좌 이체 실패 같은 심각한 문제 등은 개발자가 놓치면 안되기 때문에 이런경우에 사용하는것은 바람직하다.

        체크 예외의 문제점
        예외가 타고올라와서 의존관계가 생길 수 있는것이 가장 크다.
        이런 예외가 끝까지 올라가서 서블릿의 오류페이지나, 스프링mvc가 제공하는 공통처리하게 된다

        2가지 문제발생!
        1. 복구 불가능한 예외
        2. 의존 관계에 대한 문제

        1. 대부분의 예외는 복구가 불가능하다! 특히나 대부분의 서비스나 컨트롤러는 이런 문제를 해결할 수 없다.
        따라서 이러한 문제들은 일관성 있게 공통으로 처리해야 한다. 로그를 남기고 개발자가 인지하는게 중요
        필터, 인터셉터, ControllerAdvice를 사용하면 깔끔하게 공통으로 해결 가능

        2. 예외에 대한 의존 관계 문제! 예외를 던지는 부분을 코드에 선언하는게 왜 문제???
        서비스, 컨트롤러단에서 java.sql.SQLException을 의존하게된다.(여기서 예시)
        이러면은 향후에 repository를 jdbc가 아닌 다른 기술로 변경하게 되면 모~든 서비스, 컨트롤러의 코드를 수정해야한다.
        서비스나 컨트롤러 입장에서는 어차피 본인이 처리할 수도 없는 예외를 의존해야하는 큰 단점이 발생하게 된다.

        결과적으로 OCP, DI를 통해 클라이언트 코드의 변경 없이 대상 구현체를 변경할 수 있다는 장점이 체크 예외 때문에 문제가 발생한다.

        여러가지 EXCEPTION이 발생하여 예외를 던질때 귀찮다고 EXCEPTION을 던지면 안된다!
        중요한 체크예외를 의도한대로 사용하는 것이 아니기때문이다.

        그래서 언체크(런타임)을 사용하는것이 해결방안!

    언체크 예외 활용
