JDBC 이해
    JDBC 이해
        각각의 데이터베이스마다 커넥션연결, sql 전달, 결과 응답받는 방법이 모두 달라서
        개발자가 데이터베이스마다 다른 코드를 작성해야 하는 문제점이 있었다.

        이를 해결하기 위해 JDBC라는 표준 인터페이스를 만들었다.

        JDBC는 대표적으로 데이터베이스에 접속하고, sql을 전달하고, 결과를 받는 기능을 제공한다.

        JDBC의 등장으로 2가지 문제 해결
            1. 데이터베이스마다 다른 코드를 작성하지 않아도 된다.
            2. 각각의 데이터베이스마다 다른 커넥션, sql, 결과를 받는 방법을 알 필요가 없다. 표준만 알면 모두 동일하게 적용 가능

        JDBC의 한계 데이터베이스마다 sql, 데이터타입 등의 일부 사용법이 달라서 ANSI SQL 등장, 하지만 일반적인 부분만 공통화

    JDBC와 최신 데이터 접근 기술
        SQL Mapper와 ORM 으로 나뉜다.

        SQL Mapper
            jdbcTemplate, MyBatis가 대표적
            SQL 응답 결과를 객체로 편리하게 변환
            JDBC의 반복코드 제거

        ORM
            JPA, Hibernate가 대표적
            객체와 테이블을 매핑
            객체를 통해 데이터베이스에 접근
            SQL을 직접 작성하지 않아도 된다.
            객체지향적으로 개발 가능

        하지만 결국 로우레벨 까지 내려가면 JDBC를 사용하게 된다.

    데이터베이스 연결
        DriverManager는 라이브러리에 등록된 DB드라이버들을 관리하고, 커넥션을 획득하는 기능을 제공!

    JDBC 개발 - 등록
        리소스 정리는 역순으로! 리소스 정리는 필수

        SQL Injection 공격 예방을 위해서는 statement보다 preparedStatement를 사용하는 것이 좋다.

    JDBC 개발 - 조회
        ResultSet은 Map같은 자료구조이다.
        ResultSet은 커서를 이용해서 데이터를 조회한다. ( 내부에 cursor라는것이 존재 )
        최초의 커서는 데이터를 가리키고 있지 않아서 rs.next()를 한번은 호출해야 데이터를 조회할 수 있다.

    JDBC 개발 - 수정, 삭제
        테스트에서는 반복해서 테스트할 수 있게끔 작성하는것이 중요하다!! 매번 수정할 일 없게 crud의 과정이 다 같이 이루어져야한다.
        하지만 테스터 중간에 오류발생해서 삭제가 안되면 반복이 불가!
        그래서 이러한 문제는 트랜잭션을 활용하여 해결한다.

    정리
