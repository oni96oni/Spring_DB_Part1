커넥션풀과 데이터 소스 이해
    커넥션 풀 이해
        DriverManager를 사용하면 데이터베이스 커넥션을 매번 획득한다.
        커넥션을 새로만들어서 반환해주는것은 과정 복잡 시간도 많이소모된다.
        커넥션 풀을 사용하면 커넥션을 미리 만들어서 풀에 저장해두고 필요할때마다 풀에서 꺼내서 사용하고 반환한다.

        애플리케이션 시작하는 시점에 미리 커넥션을 확보해서 풀에보관한다.( 얼마나 보관할지는 상황에 따라 다 다르다 )

        풀에 있는 커넥션들은 TCP/IP로 DB서버와 연결되어 있기 때문에 즉시 SQL을 DB에 전달할 수 있다.

        커넥션을 모두 사용하고나면 커넥션 종료가 아니라 커넥션을 풀에 반환한다.

        hikariCP 풀 오픈소스가 많이 사용된다.

    DataSource 이해
        커넥션 풀을 이해하기위해 알아야하는 DataSource

        커넥션을 얻는 방법은 JDBC의 DriverManager를 직접 사용하거나 커넥션 풀을 사용하는 등 다양한 방법 존재!

        DriverManager를 사용하다가 커넥션풀을 사용하도록 변경하면 커넥션을 획득하는 애플리케이션 코드도 함께 변경이 필요해진다.
        그래서 ★커넥션을 획득하는 방법을 추상화하는것이 중요!!!
        이런 문제를 해결하기 위해 javax.sql.DataSource 인터페이스가 등장했다.
        이 인터페이스의 핵심 기능은 커넥션 조회! -> getConnection()

    DataSource 예제 1 - DriverManager
        DriverManager는 커넥션을 획득할때마다 url, username, password같은 파라미터를 계속전달해야한다.
        DataSource는 처음에 생성할때만 넘겨주고 획득할때는 getConnection()만 호출하면된다.

        ★설정과 사용의 분리!!!
        매번 저런 설정을 입력하는것보다 한곳에서 입력하고 그걸 가져다 쓰는것이 유지보수관점에서 편리하다!

    DataSource 예제 2 - 커넥션 풀

    DataSource 적용
        DI를 사용하면 DataSource를 애플리케이션 코드에서 직접 생성하지 않고 외부에서 생성해서 주입받을 수 있다.

        그래서 변경하고자하는 새로운 DataSource가 나와도 코드 변경없이 적용할 수 있다.

    정리
        커넥션 획득하는 과정 복잡한데 이것을 보완하기위해서 커넥션 풀 탄생!
        TCP/IP 커넥션으로 다 연결되어있음, 사용하고 풀에 다시 반환

        커넥션풀을 획득하는 방법을 추상화한것이 DataSource

        설정하는 부분을 한군데로 몰고(단일책임의 원칙) 사용하는곳에서는 끌어다가 사용